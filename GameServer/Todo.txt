Todo

Spielerdaten Anfragen, wenn Laden fertig
Chat
Maps in server laden um z.B. mobs etc. pfade zu generieren

Database
TODO: Add UNIQUEs etc.

TODO: implement database in Code

√ charactermeta(aid, characterid, key, value)

√ [UPDATED] StatList(aid, statListId, statid, value)

√ Item(ItemId, Name, Descrption, ItemTypeId, StatListId, maxSockets)

√ ItemInstance(ItemInstanceId, ItemId)
√ ItemInstanceMeta(ItemInstanceId, metakey, metavalue)

ItemList(AutoId, ItemListId, ItemId)
√ DropList(AutoId, DropListId, ItemId, Chance%)

//*** OUTDATED ***//
[REMOVED] Stat(id, name, value, description) -> Reson: inserted into GameData.cs
[REMOVED] Fraction(FractionId, Name) -> Reason: inserted into GameData.cs
[REMOVED] Race(aid, name) -> Reason: inserted into GameData.cs
[REMOVED] ItemQuality(id, quality) -> Reason: inserted into GameData.Quality
[REMOVED] EntityQuality(id, quality) -> Reason: inserted into GameData.Quality
[REMOVED] ItemType(id, type) -> Reason: inseted into GameData.Types
////////////////////

√ Entity (EntityId, TextureId, FractionId, SkillListId, EquipmentItemListId, DropListId, RaceId, Name, Qualityid, LifeBase, LifePL, Level, LevelRange, RessourceType, MaxRessource, MaxMoveSpeed, MaxAtkSpeed, damage, damagerange, expPl)
√ EntityMeta(EntityId, metaKey, metaValue)

√ SkillList(AutoId, SkillListId, SkillId)

√ Skill(skillId, Rank, Name, Description, Cost, TargetFractionId)

√ Location(locationId, MapId, x, y, z)

√ EntityInstance(EntityId, locationId, Level, Life, Ressource, MoveSpeed, AtkSpeed, Damage, damageRange)

√ Map(MapId, Name)


// Check it
Code

SpawnPos(spawnXYZ, MapId)
SpawnFixed(Path) : SpawnPos
SpawnDyn(spawnRadius) : SpawnPos

enum FractionType { Neutral, Aliance, Horde }

enum RessourceType { None, Mana, Wut, Energie }

Ressource()
Mana():Ressource
Wut():Ressource
Energie():Ressource
